import {
  TransitionGroup,
  computed,
  createBlock,
  defineComponent,
  h,
  inject,
  onMounted,
  openBlock,
  provide,
  reactive,
  renderSlot,
  unref,
  withCtx
} from "./chunk-X72XCBY2.js";
import "./chunk-TFWDKVI3.js";

// node_modules/mitt/dist/mitt.mjs
function mitt_default(n) {
  return { all: n = n || /* @__PURE__ */ new Map(), on: function(t, e) {
    var i = n.get(t);
    i ? i.push(e) : n.set(t, [e]);
  }, off: function(t, e) {
    var i = n.get(t);
    i && (e ? i.splice(i.indexOf(e) >>> 0, 1) : n.set(t, []));
  }, emit: function(t, e) {
    var i = n.get(t);
    i && i.slice().map(function(n2) {
      n2(e);
    }), (i = n.get("*")) && i.slice().map(function(n2) {
      n2(t, e);
    });
  } };
}

// node_modules/notiwind/dist/index.esm.js
var r = mitt_default();
var d = 0;
var D = () => {
  const o = d;
  return d += 1, o;
};
var N = () => (o, n) => {
  const t = {
    ...o,
    id: D(),
    group: o.group || ""
  };
  return r.emit("notify", { notification: t, timeout: n }), () => r.emit("close", t.id);
};
var g = "context";
var u = defineComponent({
  __name: "Notification",
  props: {
    maxNotifications: { default: 10 },
    enter: { default: "" },
    enterFrom: { default: "" },
    enterTo: { default: "" },
    leave: { default: "" },
    leaveFrom: { default: "" },
    leaveTo: { default: "" },
    move: { default: "" },
    moveDelay: { default: "" }
  },
  emits: ["close"],
  setup(o, { emit: n }) {
    const t = o, c = inject(g), i = reactive({ notifications: [], timeouts: {} }), a = computed(
      () => i.notifications.filter((e) => e.group === c.group)
    ), _ = computed(() => c.position === "bottom" ? [...a.value].slice(0, t.maxNotifications) : [...a.value].reverse().slice(0, t.maxNotifications)), l = (e) => {
      i.notifications.splice(
        i.notifications.findIndex((s) => s.id === e),
        1
      ), clearTimeout(i.timeouts[e]);
    }, I = ({
      notification: e,
      timeout: s
    }) => {
      i.notifications.push(e), i.timeouts[e.id] = window.setTimeout(() => {
        s !== -1 && l(e.id);
      }, Math.max(s || 3e3, 0));
    }, E = (e) => {
      n("close"), l(e);
    };
    return onMounted(() => {
      r.on("notify", I), r.on("close", l);
    }), (e, s) => (openBlock(), createBlock(TransitionGroup, {
      "enter-active-class": unref(a).length > 1 ? [t.enter, t.moveDelay].join(" ") : t.enter,
      "enter-from-class": t.enterFrom,
      "enter-to-class": t.enterTo,
      "leave-active-class": t.leave,
      "leave-from-class": t.leaveFrom,
      "leave-to-class": t.leaveTo,
      "move-class": t.move
    }, {
      default: withCtx(() => [
        renderSlot(e.$slots, "default", {
          notifications: unref(_),
          close: E
        })
      ]),
      _: 3
    }, 8, ["enter-active-class", "enter-from-class", "enter-to-class", "leave-active-class", "leave-from-class", "leave-to-class", "move-class"]));
  }
});
var v = defineComponent({
  __name: "NotificationGroup",
  props: {
    group: { default: "" },
    position: { default: "top" }
  },
  setup(o) {
    const n = o;
    return provide(g, {
      group: n.group,
      position: n.position
    }), (t, c) => renderSlot(t.$slots, "default", { group: o.group });
  }
});
function $(o) {
  o.config.globalProperties.$notify = N(), o.component("Notification", u), o.component("NotificationGroup", v), o.component("notification", u), o.component("notificationGroup", v);
}
var A = {
  install: $
};
function L() {
  return defineComponent(
    (n, { slots: t }) => () => h(u, n, t)
  );
}
var K = N();
export {
  u as Notification,
  v as NotificationGroup,
  N as createNotifier,
  A as default,
  L as defineNotificationComponent,
  K as notify
};
//# sourceMappingURL=notiwind.js.map
